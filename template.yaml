AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  Organization:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: orgid
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: orgid
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  ListOrganization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ListOrganization
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ListOrganization
      CodeUri: src/ListOrganization
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Organization
      Events:
        OrganizationRouteGETlistorganization:
          Type: Api
          Properties:
            Path: /listorganization
            Method: GET
            RestApiId: !Ref OrganizationRoute
      Environment:
        Variables:
          TABLE_NAME: !Ref Organization
          TABLE_ARN: !GetAtt Organization.Arn
  AddOrganization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AddOrganization
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: AddOrganization
      CodeUri: src/AddOrganization
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Organization
      Events:
        OrganizationRoutePOSTorganization:
          Type: Api
          Properties:
            Path: /organization
            Method: POST
            RestApiId: !Ref OrganizationRoute
      Environment:
        Variables:
          TABLE_NAME: !Ref Organization
          TABLE_ARN: !GetAtt Organization.Arn
  DeleteOrganization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteOrganization
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: DeleteOrganization
      CodeUri: src/DeleteOrganization
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Organization
      Events:
        OrganizationRouteDELETEorganizationorgid:
          Type: Api
          Properties:
            Path: /organization/{orgid}
            Method: DELETE
            RestApiId: !Ref OrganizationRoute
      Environment:
        Variables:
          TABLE_NAME: !Ref Organization
          TABLE_ARN: !GetAtt Organization.Arn
  UpdateOrganization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateOrganization
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: UpdateOrganization
      CodeUri: src/UpdateOrganization
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Organization
      Events:
        OrganizationRoutePUTorganizationorgid:
          Type: Api
          Properties:
            Path: /organization/{orgid}
            Method: PUT
            RestApiId: !Ref OrganizationRoute
      Environment:
        Variables:
          TABLE_NAME: !Ref Organization
          TABLE_ARN: !GetAtt Organization.Arn
  GetOrganization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetOrganization
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetOrganization
      CodeUri: src/GetOrganization
      Handler: handler.handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        OrganizationRouteGETorganizationorgid:
          Type: Api
          Properties:
            Path: /organization/{orgid}
            Method: GET
            RestApiId: !Ref OrganizationRoute
  OrganizationRoute:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: OrganizationRoute
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /organization:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddOrganization.Arn}/invocations
              responses: {}
          /organization/{orgid}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteOrganization.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateOrganization.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrganization.Arn}/invocations
              responses: {}
          /listorganization:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListOrganization.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)